/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.openvpn.ovpn3;

public class DnsServer {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected DnsServer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DnsServer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(DnsServer obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ovpncliJNI.delete_DnsServer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public String dnssec_string(DnsServer.Security dnssec) {
    return ovpncliJNI.DnsServer_dnssec_string(swigCPtr, this, dnssec.swigValue());
  }

  public String transport_string(DnsServer.Transport transport) {
    return ovpncliJNI.DnsServer_transport_string(swigCPtr, this, transport.swigValue());
  }

  public String to_string(String prefix) {
    return ovpncliJNI.DnsServer_to_string__SWIG_0(swigCPtr, this, prefix);
  }

  public String to_string() {
    return ovpncliJNI.DnsServer_to_string__SWIG_1(swigCPtr, this);
  }

  public void setAddresses(DnsOptions_AddressList value) {
    ovpncliJNI.DnsServer_addresses_set(swigCPtr, this, DnsOptions_AddressList.getCPtr(value), value);
  }

  public DnsOptions_AddressList getAddresses() {
    long cPtr = ovpncliJNI.DnsServer_addresses_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DnsOptions_AddressList(cPtr, false);
  }

  public void setDomains(DnsOptions_DomainsList value) {
    ovpncliJNI.DnsServer_domains_set(swigCPtr, this, DnsOptions_DomainsList.getCPtr(value), value);
  }

  public DnsOptions_DomainsList getDomains() {
    long cPtr = ovpncliJNI.DnsServer_domains_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DnsOptions_DomainsList(cPtr, false);
  }

  public void setDnssec(DnsServer.Security value) {
    ovpncliJNI.DnsServer_dnssec_set(swigCPtr, this, value.swigValue());
  }

  public DnsServer.Security getDnssec() {
    return DnsServer.Security.swigToEnum(ovpncliJNI.DnsServer_dnssec_get(swigCPtr, this));
  }

  public void setTransport(DnsServer.Transport value) {
    ovpncliJNI.DnsServer_transport_set(swigCPtr, this, value.swigValue());
  }

  public DnsServer.Transport getTransport() {
    return DnsServer.Transport.swigToEnum(ovpncliJNI.DnsServer_transport_get(swigCPtr, this));
  }

  public void setSni(String value) {
    ovpncliJNI.DnsServer_sni_set(swigCPtr, this, value);
  }

  public String getSni() {
    return ovpncliJNI.DnsServer_sni_get(swigCPtr, this);
  }

  public DnsServer() {
    this(ovpncliJNI.new_DnsServer(), true);
  }

  public final static class Security {
    public final static DnsServer.Security Unset = new DnsServer.Security("Unset");
    public final static DnsServer.Security No = new DnsServer.Security("No");
    public final static DnsServer.Security Yes = new DnsServer.Security("Yes");
    public final static DnsServer.Security Optional = new DnsServer.Security("Optional");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Security swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Security.class + " with value " + swigValue);
    }

    private Security(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Security(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Security(String swigName, Security swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Security[] swigValues = { Unset, No, Yes, Optional };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Transport {
    public final static DnsServer.Transport Unset = new DnsServer.Transport("Unset");
    public final static DnsServer.Transport Plain = new DnsServer.Transport("Plain");
    public final static DnsServer.Transport HTTPS = new DnsServer.Transport("HTTPS");
    public final static DnsServer.Transport TLS = new DnsServer.Transport("TLS");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Transport swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Transport.class + " with value " + swigValue);
    }

    private Transport(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Transport(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Transport(String swigName, Transport swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Transport[] swigValues = { Unset, Plain, HTTPS, TLS };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
